# Импортируем модули
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from random import randint as rand
from math import (sin, cos)

# Генерируем рандомный (от 0 до 10) целочисленный список (10 элементов)
x = [rand(0, 10) for i in range(10)]
x.sort()  # Выполняем сортировку по возрастанию
arr_x1 = []  # Объявляем список для хранения аргументов, условие (x > 0)
arr_x2 = []  # Объявляем список для хранения аргументов, условие (x > 0)
arr_result1 = []  # Объявляем список для хранения результатов вычисления, при аргументах x > 0
# Объявляем список для хранения результатов вычисления, при аргументах x <= 0
arr_result2 = []

for i in x:  # Помещаем в цикл список с аргументами
    if i >= 7:  # Условие
        arr_x1.append(i)  # Добавляем в список аргумент функции
        arr_result1.append(sin(i))  # Добавляем в список значение функции
    elif i < 7:  # Условие
        arr_x2.append(i)  # Добавляем в список аргумент функции
        arr_result2.append(cos(i/2 + 2))  # Добавляем в список значение функции

arr_x1 = np.array(arr_x1)  # Генерируем одномерный массив numpy из списка
arr_x2 = np.array(arr_x2)  # Генерируем одномерный массив numpy из списка
# Генерируем одномерный массив numpy из списка
arr_result1 = np.array(arr_result1)
# Генерируем одномерный массив numpy из списка
arr_result2 = np.array(arr_result2)

# Соединяем 2 одномерных массива в один (также одномерный) (np.hstack() превращает кортеж массивов в один, растягивая его "по горизонтали")
arrX = np.hstack(((arr_x1), (arr_x2)))
# Соединяем 2 одномерных массива в один (также одномерный) (np.hstack() превращает кортеж массивов в один, растягивая его "по горизонтали")
arrResult = np.hstack(((arr_result1), (arr_result2)))

# Преобразуем одномерный массив numpy в тип Series (составная часть DataFrame. Series похож на словарь)
dataX = pd.Series(arrX)
# Преобразуем одномерный массив numpy в тип Series (составная часть DataFrame. Series похож на словарь)
dataRes = pd.Series(arrResult)

# Создаём DataFrame (своеобразная таблица)
dataFrame = pd.DataFrame({
    'Argument': dataX  # Создаём 1 столбец, именем которого будет 'Аргумент', в качестве данных помещаем аргументы функции
})
# Добавляем в нашу таблицу 2 столбец с именем 'Значение', в качестве данных помещаем результаты вычислений функции
dataFrame.insert(1, 'Value', dataRes)

print(f'Получившаяся таблица:\n{dataFrame}\n')  # Распечатываем нашу таблицу

# Записываем таблицу в файл result.csv, который созаётся в текущей директории
dataFrame.to_csv("result.csv")
df = pd.read_csv("result.csv")  # Открываем наш файл с таблицей
print(f'Таблица из файла result.csv\n{df}')  # Распечатываем его на экран

plt.title("График функции")  # Создаём название нашего графика
# Передаём данные: аргументы и результат вычислений
plt.plot(arr_x1, arr_result1, arr_x2, arr_result2)
plt.show()  # Показываем нашу таблицу в новом окне
